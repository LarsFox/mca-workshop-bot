package bot

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/LarsFox/mca-workshop-bot/storage"
	"github.com/LarsFox/mca-workshop-bot/tg"
)

const (
	errMessage      = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ."
	okMessage       = "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ %s</b>\n–ê–º–æ—Ä–∞–ª—å–Ω–æ—Å—Ç—å: %.2f\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å: %.2f\n–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ—Å—Ç—å: %.2f"
	selectMessage   = "–í –∫–∞–∫—É—é –º–æ–¥–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–ª–∏–∫–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑?"
	selectedMessage = "–ü–æ–Ω—è–ª. –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–ø–ª–∏–∫–∏ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ %s\n\n–°–º–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ä–µ–ø–ª–∏–∫–∏ –Ω–∞ –æ—Ü–µ–Ω–∫—É!"
	modelAll        = "–í–æ –≤—Å–µ —Å—Ä–∞–∑—É üìä"
)

var singleCommands = map[string]string{
	"/start":   "–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±—É—é —Ä–µ–ø–ª–∏–∫—É, –∞ —è –æ—Ü–µ–Ω—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –º–æ–¥–µ–ª–∏ –≠–ª–º–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –æ—Ç–ø—Ä–∞–≤—å /select",
	"/help":    "–ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±—É—é —Ä–µ–ø–ª–∏–∫—É, –∞ —è –æ—Ü–µ–Ω—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n\n–ü–æ¬†—É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –≠–ª–º–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å /select, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é",
	textCancel: "–û–∫–µ–π.\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±—É—é —Ä–µ–ø–ª–∏–∫—É, –∞ —è –æ—Ü–µ–Ω—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è",
}

// Available models.
const (
	ModelBert     = "bert"
	ModelElmo     = "elmo"
	ModelFasttext = "fasttext"
)

const (
	textBert     = "–ë–µ—Ä—Ç üÖ±Ô∏è"
	textElmo     = "–≠–ª–º–æ üç™"
	textFasttext = "–§–∞—Å—Ç—Ç–µ–∫—Å—Ç üî§"
	textCancel   = "–û—Ç–º–µ–Ω–∞ üîô"
)

var modelsTexts = map[string]string{
	ModelBert:     textBert,
	ModelElmo:     textElmo,
	ModelFasttext: textFasttext,
}

type request struct {
	Text string `json:"text"`
}

type answer struct {
	Immoral float64 `json:"immoral"`
	Obscene float64 `json:"obscene"`
	Person  float64 `json:"person"`
}

// Bot communicates with user via Telegram and with model via HTTP.
type Bot struct {
	modelAddrs    map[string]string
	storageClient *storage.Client
	tgClient      *tg.Client
}

// New returns a new bot.
func New(storageClient *storage.Client, tgClient *tg.Client, modelAddrs map[string]string) *Bot {
	return &Bot{
		modelAddrs:    modelAddrs,
		storageClient: storageClient,
		tgClient:      tgClient,
	}
}

// Listen listens the incoming messages.
func (bot *Bot) Listen() {
	log.Println("Listening...")

	msgChan, err := bot.tgClient.GetMessagesChan()
	if err != nil {
		log.Println("Error with the message channel, try again")
		return
	}

	for msg := range msgChan {
		if msg != nil {
			go bot.handleMsg(msg)
		}
	}
}

func (bot *Bot) handleMsg(msg *tg.Message) {
	for command, text := range singleCommands {
		if msg.Text != command {
			continue
		}

		bot.sendMessage(msg.Chat.ID, text, nil)
		return
	}

	if msg.Text == "/select" {
		bot.sendMessage(msg.Chat.ID, selectMessage, &tg.ReplyKeyboardMarkup{
			Keyboard: [][]*tg.KeyboardButton{
				{{Text: textBert}},
				{{Text: textFasttext}},
				{{Text: textElmo}},
				{{Text: textCancel}},
			},
			OneTimeKeyboard: true,
		})
		return
	}

	for model, text := range modelsTexts {
		if msg.Text != text {
			continue
		}

		if err := bot.storageClient.SaveUserModel(msg.Chat.ID, model); err != nil {
			log.Println(err)
			bot.sendErrorMessage(msg.Chat.ID)
			return
		}

		bot.tgClient.SendMessage(msg.Chat.ID, fmt.Sprintf(selectedMessage, text), nil)
		return
	}

	log.Println("message from:", msg.Chat.ID, msg.Chat.Username, msg.Text)
	for _, p := range msg.Photo {
		log.Println("photo from:", msg.Chat.ID, msg.Chat.Username, p.FileID, p.FileUniqueID)
	}

	model, err := bot.storageClient.GetUserModel(msg.Chat.ID)
	if err != nil {
		log.Println(err)
		bot.sendErrorMessage(msg.Chat.ID)
		return
	}

	if model == "" {
		model = ModelElmo
	}

	addr, ok := bot.modelAddrs[model]
	if !ok {
		log.Println("no addr for model", model)
		bot.sendErrorMessage(msg.Chat.ID)
		return
	}

	a, err := bot.callModel(addr, msg.Text)
	if err != nil {
		bot.sendErrorMessage(msg.Chat.ID)
		return
	}
	bot.sendMessage(msg.Chat.ID, fmt.Sprintf(okMessage, modelsTexts[model], a.Immoral, a.Person, a.Obscene), nil)
}

func (bot *Bot) callModel(addr, text string) (*answer, error) {
	b, err := json.Marshal(&request{Text: text})
	if err != nil {
		return nil, err
	}

	resp, err := http.Post(addr, "application/json", bytes.NewBuffer(b)) // #nosec 117
	if err != nil {
		return nil, err
	}

	a := &answer{}
	defer resp.Body.Close()
	if err := json.NewDecoder(resp.Body).Decode(a); err != nil {
		return nil, err
	}
	return a, nil
}

// sendMessage sends a message using tgClient.
func (bot *Bot) sendMessage(chatID int64, text string, keyboard *tg.ReplyKeyboardMarkup) {
	resp, err := bot.tgClient.SendMessage(chatID, text, keyboard)
	if err != nil {
		log.Println(err)
		return
	}

	if !resp.Ok {
		log.Println("not ok!", resp.ErrorCode, string(resp.Description))
	}
}

// sendErrorMessage sends an¬†error message using tgClient.
func (bot *Bot) sendErrorMessage(chatID int64) {
	bot.sendMessage(chatID, errMessage, nil)
}
